#!/usr/bin/env python
# coding: utf-8


# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'frontend.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import os
import numpy as np
import cv2
import matplotlib.pyplot as plt
import threading

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QLabel, QFileDialog, QVBoxLayout, QWidget
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtCore import Qt

from sklearn.model_selection import train_test_split
from sklearn.svm import SVC

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(915, 780)
        MainWindow.setStyleSheet("background-color: qlineargradient(spread:reflect, x1:0.767, y1:0.602, x2:1, y2:0, stop:0.442786 rgba(255, 220, 247, 255), stop:1 rgba(255, 255, 255, 255));\n"
"font: 12pt \"MS Shell Dlg 2\";")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(240, 180, 411, 31))
        self.label.setStyleSheet("font: 16pt \"Modern No. 20\";\n"
"color: rgb(36, 7, 124);\n"
"background-color: rgb(255, 238, 254);")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(70, 80, 771, 21))
        self.label_2.setStyleSheet("font: 16pt \"Modern No. 20\";\n"
"background-color: rgb(255, 238, 254);")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(180, 30, 551, 31))
        self.label_3.setStyleSheet("font: 16pt \"Modern No. 20\";\n"
"background-color: rgb(255, 238, 254);")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(360, 130, 171, 21))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(100, 250, 55, 21))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(140, 280, 231, 31))
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(140, 360, 291, 31))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(140, 320, 301, 31))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(140, 400, 291, 31))
        self.label_9.setObjectName("label_9")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(600, 450, 211, 16))
        self.label_10.setStyleSheet("font: 12pt \"MS Shell Dlg 2\";\n"
"text-decoration: underline;")
        self.label_10.setObjectName("label_10")
        self.label_11 = QtWidgets.QLabel(self.centralwidget)
        self.label_11.setGeometry(QtCore.QRect(610, 490, 191, 16))
        self.label_11.setObjectName("label_11")
        self.label_12 = QtWidgets.QLabel(self.centralwidget)
        self.label_12.setGeometry(QtCore.QRect(560, 520, 291, 21))
        self.label_12.setObjectName("label_12")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(270, 590, 331, 51))
        self.pushButton.setStyleSheet("font: 16pt \"Algerian\";\n"
"text-decoration: underline;\n"
"color: rgb(140, 8, 140);")
        self.pushButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 915, 30))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Connect the button click to the new window opening
        self.pushButton.clicked.connect(self.openBrainTumorApp)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "\"DETECTION OF BRAIN TUMOR\""))
        self.label_2.setText(_translate("MainWindow", "DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING"))
        self.label_3.setText(_translate("MainWindow", "SAPTHAGIRI COLLEGE OF ENGINEERING"))
        self.label_4.setText(_translate("MainWindow", "A Mini Project On:-"))
        self.label_5.setText(_translate("MainWindow", "By:-"))
        self.label_6.setText(_translate("MainWindow", "Shwetha K (1SG21CS100)    "))
        self.label_7.setText(_translate("MainWindow", "Supriya S Hegde (1SG21CS109)    "))
        self.label_8.setText(_translate("MainWindow", "Sneha Samanvitha(1SG21CS103)    "))
        self.label_9.setText(_translate("MainWindow", "Thanushree H M (1SG21CS114)    "))
        self.label_10.setText(_translate("MainWindow", "Under the Guidance of:"))
        self.label_11.setText(_translate("MainWindow", "Prof.Sheela Rani C M"))
        self.label_12.setText(_translate("MainWindow", "Assistant Professor,Dept. of CSE"))
        self.pushButton.setText(_translate("MainWindow", "Click here to continue"))

    def openBrainTumorApp(self):
        self.window = BrainTumorApp()
        self.window.show()


class BrainTumorApp(QMainWindow):
    def __init__(self):
        super().__init__()

        self.title = 'Brain Tumor Classification'
        self.left = 100
        self.top = 100
        self.width = 800
        self.height = 600

        self.initUI()

    def initUI(self):
        self.setWindowTitle(self.title)
        self.setGeometry(self.left, self.top, self.width, self.height)

        layout = QVBoxLayout()

        self.loadButton = QPushButton('Load Image', self)
        self.loadButton.clicked.connect(self.loadImage)
        layout.addWidget(self.loadButton)

        self.predictButton = QPushButton('Predict', self)
        self.predictButton.clicked.connect(self.predict)
        layout.addWidget(self.predictButton)

        self.imageLabel = QLabel(self)
        layout.addWidget(self.imageLabel)

        self.resultLabel = QLabel('Result: ', self)
        layout.addWidget(self.resultLabel)

        container = QWidget()
        container.setLayout(layout)
        self.setCentralWidget(container)

        self.model = None
        self.img_to_predict = None
        self.loadData()

    def loadData(self):
        def run():
            path = os.listdir('C:/Users/supri/Desktop/cg/brain_tumor/Training/')
            classes = {'no_tumor': 0, 'pituitary_tumor': 1}

            X, Y = [], []

            for cls in classes:
                cls_path = f'C:/Users/supri/Desktop/cg/brain_tumor/Training/{cls}'
                for j in os.listdir(cls_path):
                    img = cv2.imread(f'{cls_path}/{j}', 0)
                    img = cv2.resize(img, (200, 200))
                    X.append(img)
                    Y.append(classes[cls])

            X = np.array(X)
            Y = np.array(Y)
            X_updated = X.reshape(len(X), -1)

            xtrain, xtest, ytrain, ytest = train_test_split(X_updated, Y, random_state=10, test_size=0.20)
            xtrain = xtrain / 255
            xtest = xtest / 255

            self.model = SVC()
            self.model.fit(xtrain, ytrain)

            training_score = self.model.score(xtrain, ytrain)
            testing_score = self.model.score(xtest, ytest)

            print("Training Score:", training_score)
            print("Testing Score:", testing_score)

        threading.Thread(target=run).start()

    def loadImage(self):
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        fileName, _ = QFileDialog.getOpenFileName(self, "Load Image", "", "All Files (*);;JPEG (*.jpg;*.jpeg);;PNG (*.png)", options=options)
        if fileName:
            self.displayImage(fileName)

    def displayImage(self, fileName):
        def run():
            img = cv2.imread(fileName, 0)
            img_resized = cv2.resize(img, (200, 200))

            height, width = img_resized.shape
            bytesPerLine = width
            qImg = QImage(img_resized.data, width, height, bytesPerLine, QImage.Format_Grayscale8)
            self.imageLabel.setPixmap(QPixmap.fromImage(qImg))

            self.img_to_predict = img_resized

        threading.Thread(target=run).start()

    def predict(self):
        def run():
            if self.img_to_predict is None:
                self.resultLabel.setText("No image loaded for prediction.")
                return

            img_flatten = self.img_to_predict.reshape(1, -1) / 255
            prediction = self.model.predict(img_flatten)
            dec = {0: 'No Tumor', 1: 'Positive Tumor'}
            result = dec[prediction[0]]

            if result == 'Positive Tumor':
                # Highlight the tumor area
                tumor_highlighted = self.highlight_tumor(self.img_to_predict)
                height, width, channel = tumor_highlighted.shape
                bytesPerLine = 3 * width
                qImg = QImage(tumor_highlighted.data, width, height, bytesPerLine, QImage.Format_RGB888)
                self.imageLabel.setPixmap(QPixmap.fromImage(qImg))

            self.resultLabel.setText(f'Result: {result}')

        threading.Thread(target=run).start()

    def highlight_tumor(self, img):
        img_color = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
        ret, thresh = cv2.threshold(img, 127, 255, cv2.THRESH_BINARY)
        contours, hierarchy = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        for contour in contours:
            cv2.drawContours(img_color, [contour], -1, (0, 0, 255), 2)

        return img_color


if __name__ == '__main__':
    app = QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())







